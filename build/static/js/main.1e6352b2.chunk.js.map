{"version":3,"sources":["components/ClientBoards/clientPage.png","redux/reducers/errorsReducer.js","redux/reducers/loginModeReducer.js","redux/reducers/userReducer.js","redux/reducers/galleryReducer.js","redux/reducers/artPageReducer.js","redux/reducers/index.js","redux/sagas/loginSaga.js","redux/sagas/registrationSaga.js","redux/sagas/userSaga.js","redux/sagas/gallerySaga.js","redux/sagas/index.js","components/Header/Header.js","components/LogOutButton/LogOutButton.js","components/Nav/Nav.js","components/LoginPage/LoginPage.js","components/RegisterPage/RegisterPage.js","components/ProtectedRoute/ProtectedRoute.js","components/AboutPage/AboutPage.js","components/UserPage/UserPage.js","components/GalleryComponent/GalleryComponent.js","components/CuratorsGallery/CuratorsGallery.js","components/ArtPage/ArtPage.js","components/addArtworkForm/addArtworkForm.js","components/Home/Home.js","components/ClientBoards/ClientBoards.js","components/ClientPage/ClientPage.js","components/App/App.js","index.js"],"names":["module","exports","__webpack_require__","p","combineReducers","loginMessage","state","arguments","length","undefined","type","registrationMessage","loginMode","userReducer","action","payload","setArtworkReducer","artPageReducer","console","log","rootReducer","errors","user","loginUser","logoutUser","loginSaga","config","regenerator_default","a","wrap","_context","prev","next","put","headers","Content-Type","withCredentials","axios","post","t0","response","status","stop","_marked","_context2","_marked2","_context3","takeLatest","_marked3","registerUser","registrationSaga","registrationSaga_marked","registrationSaga_marked2","fetchUser","userSaga","get","sent","data","userSaga_marked","userSaga_marked2","artSaga","getArtwork","postArt","deleteArt","takeEvery","gallerySaga_marked","getArtworkResponse","dispatch","gallerySaga_marked2","gallerySaga_marked3","_context4","delete","_marked4","rootSaga","all","sagas_marked","Header","react_default","createElement","Fragment","className","src","alt","Component","connect","reduxState","props","_React$createElement","Object","defineProperty","Link","to","id","components_LogOutButton_LogOutButton","LoginPage","username","password","login","event","preventDefault","_this","handleInputChangeFor","propertyName","setState","target","value","_this2","this","role","onSubmit","htmlFor","name","onChange","onClick","RegisterPage","ComponentToShow","ComponentToProtect","component","otherProps","objectWithoutProperties","Route","assign","AboutPage","withRouter","GalleryComponent","redirect","selectedImage","showAdd","handleClick","selectedItem","toggleButton","getButton","style","backgroundColor","es_Redirect","pathname","item","image","Grid_default","sm","xs","key","CuratorsGallery","color","size","handleChange","property","objectSpread","filter","color_id","Number","style_id","size_id","map","index","components_GalleryComponent_GalleryComponent","container","spacing","displayArt","ArtPage","price","description","addArtWorkForm","title","handleChangeFor","addNewArtwork","alert","placeholder","Home","handleClickGallery","history","push","handleClickAddArtwork","handleClickClientBoards","handleClickAddClient","ClientBoards","require","ClientPage","App","HashRouter","components_Nav_Nav","components_Header_Header","components_UserPage_UserPage","Switch","Redirect","exact","from","path","components_ProtectedRoute_ProtectedRoute","addArtworkForm","render","sagaMiddleware","createSagaMiddleware","middlewareList","store","createStore","applyMiddleware","apply","run","ReactDOM","react_redux_es","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.1e6352b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/clientPage.6a4f3436.png\";","import { combineReducers } from 'redux';\n\n// loginMessage holds the string that will display\n// on the login screen if there's an error\nconst loginMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_LOGIN_ERROR':\n      return '';\n    case 'LOGIN_INPUT_ERROR':\n      return 'Enter your username and password!';\n    case 'LOGIN_FAILED':\n      return 'Oops! The username and password didn\\'t match. Try again!';\n    case 'LOGIN_FAILED_NO_CODE':\n      return 'Oops! Something went wrong! Is the server running?';\n    default:\n      return state;\n  }\n};\n\n// registrationMessage holds the string that will display\n// on the registration screen if there's an error\nconst registrationMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_REGISTRATION_ERROR':\n      return '';\n    case 'REGISTRATION_INPUT_ERROR':\n      return 'Choose a username and password!';\n    case 'REGISTRATION_FAILED':\n      return 'Oops! That didn\\'t work. The username might already be taken. Try again!';\n    default:\n      return state;\n  }\n};\n\n// make one object that has keys loginMessage, registrationMessage\n// these will be on the redux state at:\n// state.errors.loginMessage and state.errors.registrationMessage\nexport default combineReducers({\n  loginMessage,\n  registrationMessage,\n});\n","const loginMode = (state = 'login', action) => {\n    switch (action.type) {\n      case 'SET_TO_LOGIN_MODE':\n        return 'login';\n      case 'SET_TO_REGISTER_MODE':\n        return 'register';\n      default:\n        return state;\n    }\n  };\n\n// loginMode will be on the redux state at:\n// state.loginMode\n  export default loginMode;\n  ","const userReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'SET_USER':\n      return action.payload;\n    case 'UNSET_USER':\n      return {};\n    default:\n      return state;\n  }\n};\n\n// user will be on the redux state at:\n// state.user\nexport default userReducer;\n","\n// Used to store projects returned from the server\nconst setArtworkReducer = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_ART':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\n\n\n\n\n\nexport default setArtworkReducer;\n","//used to prop single artworks onto single page\n\n\nconst artPageReducer = (state = {}, action) => {\n    switch (action.type) {\n        case 'SET_WORK':\n        console.log('in single art work reducer');\n        \n            return action.payload;\n        default:\n            return state;\n    }\n\n}\n\n\n\n\n\n\nexport default artPageReducer;\n\n\n\n\n\n\n","import { combineReducers } from 'redux';\nimport errors from './errorsReducer';\nimport loginMode from './loginModeReducer';\nimport user from './userReducer';\nimport setArtworkReducer from './galleryReducer';\nimport artPageReducer from './artPageReducer';\n\n// rootReducer is the primary reducer for our entire project\n// It bundles up all of the other reducers so our project can use them.\n// This is imported in index.js as rootSaga\n\n// Lets make a bigger object for our store, with the objects from our reducers.\n// This is what we get when we use 'state' inside of 'mapStateToProps'\nconst rootReducer = combineReducers({\n  errors, // contains registrationMessage and loginMessage\n  loginMode, // will have a value of 'login' or 'registration' to control which screen is shown\n  user, // will have an id and username if someone is logged in\n  setArtworkReducer, // this is add images to the gallery\n  artPageReducer,// global reducer to set one single art work on the artpage\n});\n\nexport default rootReducer;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"LOGIN\" actions\nfunction* loginUser(action) {\n  try {\n    // clear any existing error on the login page\n    yield put({ type: 'CLEAR_LOGIN_ERROR' });\n\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // send the action.payload as the body\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    yield axios.post('api/user/login', action.payload, config);\n    \n    // after the user has logged in\n    // get the user information from the server\n    yield put({type: 'FETCH_USER'});\n  } catch (error) {\n    console.log('Error with user login:', error);\n    if (error.response.status === 401) {\n      // The 401 is the error status sent from passport\n      // if user isn't in the database or\n      // if the username and password don't match in the database\n      yield put({ type: 'LOGIN_FAILED' });\n    } else {\n      // Got an error that wasn't a 401\n      // Could be anything, but most common cause is the server is not started\n      yield put({ type: 'LOGIN_FAILED_NO_CODE' });\n    }\n  }\n}\n\n// worker Saga: will be fired on \"LOGOUT\" actions\nfunction* logoutUser(action) {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // when the server recognizes the user session\n    // it will end the session\n    yield axios.post('api/user/logout', config);\n\n    // now that the session has ended on the server\n    // remove the client-side user object to let\n    // the client-side code know the user is logged out\n    yield put({ type: 'UNSET_USER' });\n\n  } catch (error) {\n    console.log('Error with user logout:', error);\n  }\n}\n\nfunction* loginSaga() {\n  yield takeLatest('LOGIN', loginUser);\n  yield takeLatest('LOGOUT', logoutUser);\n}\n\nexport default loginSaga;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"REGISTER\" actions\nfunction* registerUser(action) {\n  try {\n    // clear any existing error on the registration page\n    yield put({ type: 'CLEAR_REGISTRATION_ERROR' });\n\n    // passes the username and password from the payload to the server\n    yield axios.post('api/user/register', action.payload);\n\n    // automatically log a user in after registration\n    yield put({ type: 'LOGIN', payload: action.payload });\n    \n    // set to 'login' mode so they see the login screen\n    // after registration or after they log out\n    yield put({type: 'SET_TO_LOGIN_MODE'});\n  } catch (error) {\n      console.log('Error with user registration:', error);\n      yield put({type: 'REGISTRATION_FAILED'});\n  }\n}\n\nfunction* registrationSaga() {\n  yield takeLatest('REGISTER', registerUser);\n}\n\nexport default registrationSaga;\n","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on \"FETCH_USER\" actions\nfunction* fetchUser() {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // If a user is logged in, this will return their information\n    // from the server session (req.user)\n    const response = yield axios.get('api/user', config);\n\n    // now that the session has given us a user object\n    // with an id and username set the client-side user object to let\n    // the client-side code know the user is logged in\n    yield put({ type: 'SET_USER', payload: response.data });\n  } catch (error) {\n    console.log('User get request failed', error);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest('FETCH_USER', fetchUser);\n}\n\nexport default userSaga;\n","import axios from 'axios';\n\n// Import saga middleware\nimport { takeEvery, put as dispatch} from 'redux-saga/effects';\n\n\n//root Saga\nfunction* artSaga() {\n    yield takeEvery('FETCH_GALLERY', getArtwork);\n    yield takeEvery('DELETE_ARTWORK', deleteArt);\n    yield takeEvery('ADD_ARTWORK', postArt);\n}\n\n//generator functions\nfunction* getArtwork() {\n    const getArtworkResponse = yield axios.get('/api/gallery');\n    yield dispatch({ type: 'SET_ART', payload: getArtworkResponse.data });\n}\n\n\nfunction* postArt(action){\n    try {\n        console.log('Julia are you here?', action.payload);\n        \n        yield axios.post('/api/gallery', action.payload)\n        yield dispatch({ type: 'FETCH_GALLERY' });\n    }\n    catch (error) {\n        console.log('error with axios post request', error);\n\n    }\n}\n\n\nfunction * deleteArt(action) {\n    try {\n        yield axios.delete('/api/gallery/' + action.payload);\n        yield dispatch({ type: 'FETCH_GALLERY' });\n    }\n    catch (error) {\n        console.log('error deleting', action, error);\n    }\n}\n\n\nexport default artSaga;","import { all } from 'redux-saga/effects';\nimport loginSaga from './loginSaga';\nimport registrationSaga from './registrationSaga';\nimport userSaga from './userSaga';\nimport artSaga from './gallerySaga';\n\n\n// rootSaga is the primary saga.\n// It bundles up all of the other sagas so our project can use them.\n// This is imported in index.js as rootSaga\n\n// some sagas trigger other sagas, as an example\n// the registration triggers a login\n// and login triggers setting the user\nexport default function* rootSaga() {\n  yield all([\n    loginSaga(),\n    registrationSaga(),\n    userSaga(),\n    artSaga(),\n  \n\n  ]);\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './Header.css'\n\n\nclass Header extends Component {\n\n\n    render() {\n        return (\n<>\n            <div>\n\n                <img className=\"logo\" src=\"images/final.png\" alt=\"header\"/>\n\n            </div>\n            </>\n        );\n    }\n}\n\n\nconst mapReduxStateToProps = (reduxState) => {\n    return reduxState;\n\n}\n\n\nexport default connect(mapReduxStateToProps)(Header);\n\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst LogOutButton = props => (\n  <button className=\"logoutButton\"\n    // This button shows up in multiple locations and is styled differently\n    // because it's styled differently depending on where it is used, the className\n    // is passed to it from it's parents through React props\n    className={props.className}\n    onClick={() => props.dispatch({ type: 'LOGOUT' })}\n  >\n    Log Out\n  </button>\n);\n\n// This component doesn't need 'mapStateToProps'\n// because it doesn't care what the current state is.\n// No matter what the redux state is, this button will always be a log out button\n// this component still needs 'connect' though, because it is going to dispatch a redux action\nexport default connect()(LogOutButton);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport LogOutButton from '../LogOutButton/LogOutButton';\nimport './Nav.css';\n\nconst Nav = (props) => (\n  <div className=\"flex-container\">\n    <div className=\"header\"> </div>\n    <div className=\"nav\">\n\n      <div className=\"nav-title\"></div>\n      <Link to=\"/home\"></Link>\n     \n      <div className=\"nav-right\">\n        <Link className=\"nav-link\" to=\"/about\">\n          About\n</Link>\n        <Link className=\"nav-link\" to=\"/home\">\n          {/* Show this link if they are logged in or not,\nbut call this link 'Home' if they are logged in,\nand call this link 'Login / Register' if they are not */}\n          {props.user.id ? 'Home' : 'Login / Register'}\n        </Link>\n\n        {/* Show the link to the info page and the logout button if the user is logged in */}\n        {props.user.id && (\n          <>\n            <Link className=\"nav-link\" to=\"/artform\">\n              \n</Link>\n            <Link className=\"nav-link\" to=\"/clientgallery\">\n              \n</Link>\n            <Link className=\"nav-link\" to=\"/addClient\">\n             \n</Link>\n            <Link className=\"nav-link\" to=\"/curatorgallery\">\n              \n</Link>\n\n\n            <LogOutButton className=\"nav-link\" />\n          </>\n        )}\n\n      </div>\n    </div>\n  </div>\n);\n\n// Instead of taking everything from state, we just want the user\n// object to determine if they are logged in\n// if they are logged in, we show them a few more links\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({ user }) => ({ user });\nconst mapStateToProps = state => ({\n  user: state.user,\n});\n\nexport default connect(mapStateToProps)(Nav);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass LoginPage extends Component {\n  state = {\n    username: '',\n    password: '',\n  };\n\n  login = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'LOGIN',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({ type: 'LOGIN_INPUT_ERROR' });\n    }\n  } // end login\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.props.errors.loginMessage && (\n          <h2\n            className=\"alert\"\n            role=\"alert\"\n          >\n            {this.props.errors.loginMessage}\n          </h2>\n        )}\n        <form onSubmit={this.login}>\n          <h1>Login</h1>\n          <div>\n            <label htmlFor=\"username\">\n              Username:\n              <input\n                type=\"text\"\n                name=\"username\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor('username')}\n              />\n            </label>\n          </div>\n          <div>\n            <label htmlFor=\"password\">\n              Password:\n              <input\n                type=\"password\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor('password')}\n              />\n            </label>\n          </div>\n          <div>\n            <input\n              className=\"log-in\"\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Log In\"\n            />\n          </div>\n        </form>\n        <center>\n          <button\n            type=\"button\"\n            className=\"link-button\"\n            onClick={() => {this.props.dispatch({type: 'SET_TO_REGISTER_MODE'})}}\n          >\n            Register\n          </button>\n        </center>\n      </div>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(LoginPage);\n","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\n\nclass RegisterPage extends Component {\n  state = {\n    username: '',\n    password: '',\n  };\n\n  registerUser = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'REGISTER',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({type: 'REGISTRATION_INPUT_ERROR'});\n    }\n  } // end registerUser\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.props.errors.registrationMessage && (\n          <h2\n            className=\"alert\"\n            role=\"alert\"\n          >\n            {this.props.errors.registrationMessage}\n          </h2>\n        )}\n        <form onSubmit={this.registerUser}>\n          <h1>Register User</h1>\n          <div>\n            <label htmlFor=\"username\">\n              Username:\n              <input\n                type=\"text\"\n                name=\"username\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor('username')}\n              />\n            </label>\n          </div>\n          <div>\n            <label htmlFor=\"password\">\n              Password:\n              <input\n                type=\"password\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor('password')}\n              />\n            </label>\n          </div>\n          <div>\n            <input\n              className=\"register\"\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Register\"\n            />\n          </div>\n        </form>\n        <center>\n          <button\n            type=\"button\"\n            className=\"link-button\"\n            onClick={() => {this.props.dispatch({type: 'SET_TO_LOGIN_MODE'})}}\n          >\n            Login\n          </button>\n        </center>\n      </div>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(RegisterPage);\n\n","import React from 'react';\nimport {Route} from 'react-router-dom'\nimport {connect} from 'react-redux';\nimport LoginPage from '../LoginPage/LoginPage';\nimport RegisterPage from '../RegisterPage/RegisterPage';\n\n// A Custom Wrapper Component -- This will keep our code DRY.\n// Responsible for watching redux state, and returning an appropriate component\n// API for this component is the same as a regular route\n\n// THIS IS NOT SECURITY! That must be done on the server\n// A malicious user could change the code and see any view\n// so your server-side route must implement real security\n// by checking req.isAuthenticated for authentication\n// and by checking req.user for authorization\n\nconst ProtectedRoute = (props) => {\n  // Using destructuring, this takes ComponentToProtect from component\n  // prop and grabs all other props to pass them along to Route\n  const {\n    // Alias prop 'component' as 'ComponentToProtect'\n    component: ComponentToProtect,\n    user,\n    loginMode,\n    ...otherProps\n  } = props;\n\n  let ComponentToShow;\n\n  if(user.id) {\n    // if the user is logged in (only logged in users have ids)\n    // show the component that is protected\n    ComponentToShow = ComponentToProtect;\n  } else if (loginMode === 'login') {\n    // if they are not logged in, check the loginMode on Redux State\n    // if the mode is 'login', show the LoginPage\n    ComponentToShow = LoginPage;\n  } else {\n    // the the user is not logged in and the mode is not 'login'\n    // show the RegisterPage\n    ComponentToShow = RegisterPage;\n  }\n\n  // We return a Route component that gets added to our list of routes\n  return (\n      <Route\n        // all props like 'exact' and 'path' that were passed in\n        // are now passed along to the 'Route' Component\n        {...otherProps}\n        component={ComponentToShow}\n      />\n  )\n}\n\n// Instead of taking everything from state, we just want the user and loginMode\n// to determine which page we should show the user\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({ user, loginMode }) => ({ user, loginMode });\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    loginMode: state.loginMode,\n  }\n}\n\nexport default connect(mapStateToProps)(ProtectedRoute)\n\n\n","import React from 'react';\n\n// This is one of our simplest components\n// It doesn't have local state, so it can be a function component.\n// It doesn't dispatch any redux actions or display any part of redux state\n// or even care what the redux state is, so it doesn't need 'connect()'\n\nconst AboutPage = () => (\n  <div>\n    <div>\n      <p>\n        This about page is for anyone to read!\n      </p>\n    </div>\n  </div>\n);\n\nexport default AboutPage;\n","import React from 'react';\nimport { connect } from 'react-redux';\n// import LogOutButton from '../LogOutButton/LogOutButton';\nimport { withRouter } from 'react-router-dom';\n\n// import Home from '../Home/Home';\nimport './user.css';\n\n// this could also be written with destructuring parameters as:\n// const UserPage = ({ user }) => (\n// and then instead of `props.user.username` you could use `user.username`\nconst UserPage = (props) => (\n  <div className=\"flex-container\">\n    <div className=\"bckgrnd-container\">\n     \n      <h1 id=\"welcome\">\n        {/* Time to get your art on, {props.user.username}! */}\n    </h1>\n      {/* <p>Your ID is: {props.user.id}</p> */}\n      \n\n    </div>\n    \n  </div>\n);\n\n// Instead of taking everything from state, we just want the user info.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({user}) => ({ user });\nconst mapStateToProps = state => ({\n  user: state.user,\n});\n\n// this allows us to use <App /> in index.js\n\nexport default withRouter(connect(mapStateToProps)(UserPage));\n","\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router';\nimport Grid from '@material-ui/core/Grid';\n\n\nclass GalleryComponent extends Component {\n    state = {\n        redirect: false,\n        selectedImage: '',\n        showAdd: true,\n    }\n\n\n    // redirects to artpage when view artWork button is clicked\n    handleClick = selectedItem => () => {\n        console.log('setting artwork on page', selectedItem);\n        this.props.dispatch({ type: 'SET_WORK', payload: selectedItem })\n        this.setState({\n            redirect: true\n        });\n    }\n\n\n    toggleButton = () => {\n        console.log('in toggle button');\n        this.setState({\n            showAdd: !(this.state.showAdd),\n        })\n    }\n\n    // showButtonText = () => {\n    //     if (this.state.showAdd) {\n    //         return <button>AVAILABLE</button>\n    //     }\n    //     else {\n    //         return <button onClick={this.removePizza(this.props.item)}>RENTED</button>\n    //     }\n    // }\n    //Delete button on gallery component\n    // handleDelete = id => {\n    //     return () => {\n    //         this.props.dispatch({ type: 'DELETE_ARTWORK', payload: id })\n    //     }\n    // }\n  \n\n    getButton = () => {\n        return this.state.showAdd ? <button onClick={this.toggleButton}>AVAILABLE</button> : \n            <button style={{ backgroundColor: '#ff5b45' }} onClick={this.toggleButton}>RENTED</button>;\n    }\n\n\n    render() {\n        if (this.state.redirect) {\n            console.log('selected image', this.state.selectedImage);\n            return <Redirect to={{ pathname: '/artpage' }} />\n        }\n        console.log(this.props.item.image);\n        console.log('Tj', this.props.setArtworkReducer);\n        \n        return (\n\n         \n\n            <Grid item sm={3} xs={12} className=\"image-div\">\n                <img key={this.props.item.id} src={this.props.item.image} alt={this.props.item} /> <br />\n\n\n                <div className=\"item-button-div\">\n                    <button onClick={this.handleClick(this.props.item)} >VIEW WORK DETAILS</button>\n                </div>\n\n                <div className=\"item-button-div\">\n                    {/* <button style={{backgroundColor: 'blue'}} onClick={this.toggleButton}>{this.getButtonText()}</button> */}\n                    {this.getButton()}\n                </div>\n\n                <div>\n                    <select className=\"clientButton\">\n                        <option>SELECT PROJECT BOARD</option>\n                        <option>Prime Digital Academy</option>\n                        <option>RCM Plaza</option>\n                        <option>Foshay</option>\n                    </select>\n                </div>\n                \n                </Grid>\n              \n\n        );\n    }\n}\n\n\n\n\nconst mapReduxStateToProps = (reduxState) => {\n    return reduxState;\n}\n\nexport default connect(mapReduxStateToProps)(GalleryComponent);\n\n","\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport GalleryComponent from '../GalleryComponent/GalleryComponent';\nimport './CuratorsGallery.css';\nimport Grid from '@material-ui/core/Grid';\n\n\n\nclass CuratorsGallery extends Component {\n  state = {\n    style: '',\n    color: '',\n    size: '',\n\n  };\n\n\n  componentDidMount() {\n    this.getArtwork();\n  }\n\n  //GET entire gallery of work\n  getArtwork() {\n    this.props.dispatch({ type: 'FETCH_GALLERY' })\n  }\n\n  //displays the gallery of work \n  displayArt() {\n    console.log('inside disp function', this.props.setArtworkReducer);\n\n    if (this.state.style !== '' || this.state.color !== '' || this.state.size !== '') {\n      console.log('Filter');\n\n      // apply filter\n      return this.props.setArtworkReducer.filter(item => {\n\n        if (this.state.color && this.state.style && this.state.size) {\n          return (item.color_id === Number(this.state.color) &&\n            item.style_id === Number(this.state.style) &&\n            item.size === (this.state.size));\n        }\n\n        if (this.state.color && this.state.style) {\n          return (item.color_id === Number(this.state.color) &&\n            item.style_id === Number(this.state.style));\n        }\n\n        if (this.state.color && this.state.size) {\n          return (item.color_id === Number(this.state.color) &&\n            item.size_id === (this.state.size));\n        }\n\n        if (this.state.style && this.state.size) {\n          return (item.style_id === Number(this.state.style) &&\n            item.size_id === (this.state.size));\n        }\n\n        if (this.state.style) {\n          return (item.style_id === Number(this.state.style));\n        }\n\n        if (this.state.color) {\n          return (item.color_id === Number(this.state.color));\n        }\n\n        if (this.state.size) {\n          return (item.size_id === (this.state.size));\n        }\n\n        return true;\n\n      }\n      ).map((item, index) =>\n        <GalleryComponent key={index} item={item} />)\n    } else {\n      console.log('No filter');\n\n      // no filter\n      return this.props.setArtworkReducer.map((item, index) =>\n        <GalleryComponent key={index} item={item} />)\n    }\n\n\n\n  }\n\n\n  handleChange = (property) => (event) => {\n    this.setState({\n      ...this.state,\n      [property]: event.target.value\n    });\n\n  }\n\n\n  render() {\n    console.log('this.props.setArtworkReducer', this.props.setArtworkReducer);\n    console.log('this.state', this.state);\n\n\n    return (\n      <>\n        <Grid container className=\"whiteSpace\">\n\n          <Grid item className=\"dropdowns\">\n\n            <Grid container>\n\n              <Grid item>\n                <select onChange={this.handleChange(\"style\")}>\n                  <option value=''>STYLE</option>\n                  <option value=\"1\">Modern Art Work</option>\n                  <option value=\"2\">Digital Prints</option>\n                  <option value=\"3\">Pop Art</option>\n                  <option value=\"22\">Still Life</option>\n                  <option value=\"4\">Abstract Landscape</option>\n                  <option value=\"5\">Realist Landscape</option>\n                  <option value=\"6\">Graffiti</option>\n                  <option value=\"7\">Photography</option>\n                  <option value=\"8\">Painting</option>\n                  <option value=\"9\">3D Artwork</option>\n                  <option value=\"10\">Hyperrealism</option>\n                  <option value=\"11\">Magical Realism</option>\n                  <option value=\"12\">Impressionism</option>\n                  <option value=\"13\">Abstract Minimalism</option>\n                  <option value=\"14\">Mixed Media</option>\n                  <option value=\"15\">Miscellaneous</option>\n                  <option value=\"16\">Works on Paper</option>\n                  <option value=\"17\">Assemblage</option>\n                  <option value=\"18\">Collage</option>\n                  <option value=\"19\">Local Artist</option>\n                  <option value=\"20\">American Artists</option>\n                  <option value=\"21\">International Artists</option>\n                </select>\n              </Grid>\n\n              <Grid item>\n                <select onChange={this.handleChange(\"color\")}>\n                  <option value=''>COLOR</option>\n                  <option value=\"1\">Pastels</option>\n                  <option value=\"2\">Black and White</option>\n                  <option value=\"11\">Neon Electric</option>\n                  <option value=\"12\">Warm</option>\n                  <option value=\"13\">Cool Tones</option>\n                  <option value=\"14\">Monochromatic</option>\n                  <option value=\"15\">Retro Cool</option>\n                  <option value=\"16\">Primary Colors</option>\n                  <option value=\"17\">Earth Tones</option>\n                  <option value=\"18\">City Grit</option>\n                  <option value=\"19\">High Contrast</option>\n                  <option value=\"22\">Deep Dark</option>\n                  <option value=\"23\">Bright Bold</option>\n                  <option value=\"24\">Godly Glow</option>\n                  <option value=\"25\">Muted Tones</option>\n                  <option value=\"26\">Matallics</option>\n                  <option value=\"27\">Natural Materials</option>\n                </select>\n              </Grid>\n\n              <Grid item>\n                <select onChange={this.handleChange(\"size\")}>\n                  <option value=''>SIZE</option>\n                  <option value=\"small\">Small</option>\n                  <option value=\"medium\">Medium</option>\n                  <option value=\"large\">Large</option>\n                </select>\n              </Grid>\n            </Grid>\n          </Grid>\n\n         \n\n          {/* <Grid item> */}\n            <Grid className=\"add-margin\" container spacing={24}>\n              {this.displayArt()}\n            </Grid>\n          {/* </Grid> */}\n\n        </Grid>\n      </>\n    );\n  }\n}\n\nconst mapReduxStateToProps = (reduxState) => {\n  return reduxState;\n}\n\n\nexport default connect(mapReduxStateToProps)(CuratorsGallery);\n\n","\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './ArtPage.css';\n\n\n\n\nclass ArtPage extends Component {\n\n\n\n\n\n    render() {\n        console.log('YO TONY', this.props.artPageReducer);\n\n\n        return (\n\n            <div className=\"imageText\">\n                <div className=\"pageImage\">\n                    <img className=\"pageImageSize\" src={this.props.artPageReducer.image} alt=\"a banana\" />\n                </div>\n\n              \n                \n                    \n                <div className=\"pageList\">\n                    <ul className=\"artPageList\">\n                        <br></br>\n                        <li>Size:   {this.props.artPageReducer.size}</li>\n                        <br></br>\n                        <li>Color:  {this.props.artPageReducer.color}</li>\n                        <br></br>\n                        <li>Price:  ${this.props.artPageReducer.price}</li>\n                        <br></br>\n                        <li>Artist:  {this.props.artPageReducer.name}</li>\n                        <br></br>\n                        <li>Style of Work:  {this.props.artPageReducer.type}</li>\n                        <br></br>\n                        <li>Other Notes:  {this.props.artPageReducer.description}</li>\n                    </ul>\n\n                </div>\n\n                    {/* <div>\n                    <select className = \"clientButton\">\n                        <option>SELECT PROJECT BOARD</option>\n                        <option>Prime Digital Academy</option>\n                        <option>RCM Plaza</option>\n                        <option>Foshay</option>\n                    </select>\n                    </div> */}\n\n\n\n\n\n            </div>\n        );\n    }\n}\n\n\nconst mapReduxStateToProps = (reduxState) => {\n    return reduxState;\n\n}\n\n\nexport default connect(mapReduxStateToProps)(ArtPage);\n\n","\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n\nclass addArtWorkForm extends Component {\nstate= {\n    image:'',\n    size: '',\n    price: '',\n    description: '',\n    title: '',\n    }\n    \n\nhandleChangeFor = (property) => (event) => {\n    this.setState({\n    ...this.state, \n    [property]: event.target.value,\n    })\n\n}//handleChangeFor add to artwork gallery\n\n\n\naddNewArtwork = () => {\n    alert('Added New ArtWork!')\n  console.log(this.state);\n    this.props.dispatch({\n        type: \"ADD_ARTWORK\",\n        payload: this.state,\n\n    })\n    this.setState({\n    image:'',\n    size: '',\n    price: '',\n    description: '',\n    title: '',\n    })\n}\n\n\nrender() {\n        return (\n        \n                <div>\n                    <form onSubmit={this.addNewArtwork}>\n                       <input value={this.state.image} onChange={this.handleChangeFor('image')} placeholder= \"Image URL\" />\n                        <input value={this.state.size} onChange={this.handleChangeFor('size')} placeholder= \"Size of ArtWork\" />\n                        $ <input value={this.state.price} onChange={this.handleChangeFor('price')} type = \"number\" placeholder =\"Price\" />\n                         <input id= \"box\" value={this.state.description} onChange={this.handleChangeFor('description')} placeholder=\"Description\" />\n                        <input value={this.state.title} onChange={this.handleChangeFor('title')} placeholder=\"Title Of Piece\" />\n                       \n                       \n                      <center>  <button>  ADD ARTWORK TO GALLERY  </button></center>\n                    </form>\n                </div>\n            \n        );\n    }\n}\n\nconst mapReduxStateToProps = (reduxState) => {\n    return reduxState;\n}\n\n\nexport default connect(mapReduxStateToProps)(addArtWorkForm);\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport './Home.css'\n\n\nclass Home extends Component {\n\n    handleClickGallery = () => {\n        this.props.history.push('/curatorGallery')\n    };\n\n    handleClickAddArtwork = () => {\n        this.props.history.push('/artform')\n    };\n\n    handleClickClientBoards = () => {\n        this.props.history.push('/clientBoards')\n    };\n\n    handleClickAddClient = () => {\n        this.props.history.push('/clientForm')\n    };\n\n\n    render() {\n        return (\n            <>\n          <div>\n              <div className=\"container\">\n\n                    <div className=\"buttonBox button-grid-container\">\n                        \n                            <div className=\"button-grid-item\"><button className=\"homeButton \" onClick={this.handleClickGallery} > CURATOR'S GALLERY</button></div>\n                        \n                            <div className=\"button-grid-item\"><button className=\"homeButton\" onClick = {this.handleClickClientBoards}> CLIENT BOARDS</button></div>\n                          \n                            <div className=\"button-grid-item\"><button className=\"homeButton\" onClick = {this.handleClickAddArtwork}> ADD ART WORK</button></div>\n                            <div className=\"button-grid-item\"><button className=\"homeButton\" onClick={this.handleClickAddClient}> ADD CLIENT</button></div>\n                           \n\n                    </div>\n\n                    </div>\n\n                     </div>\n            \n               \n            </>\n        );\n    }\n}\n\n\nconst mapReduxStateToProps = (reduxState) => {\n    return reduxState;\n\n}\n\n\nexport default withRouter(connect(mapReduxStateToProps)(Home));\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport './ClientBoards.css'\n\n\nclass ClientBoards extends Component {\n\n    \n\n    render() {\n        return (\n            <>\n                <div>\n                   \n                    <div className=\"clientbody\">\n                        <img src={require('./clientPage.png')} />\n                    \n                    </div>\n\n\n\n                </div>\n\n\n            </>\n        );\n    }\n}\n\n\nconst mapReduxStateToProps = (reduxState) => {\n    return reduxState;\n\n}\n\n\nexport default withRouter(connect(mapReduxStateToProps)(ClientBoards));\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport './ClientPage.css'\n\n\nclass ClientPage extends Component {\n\n\n\n    render() {\n        return (\n            <>\n                <div>\n\n\n                  \n\n                </div>\n\n\n            </>\n        );\n    }\n}\n\n\nconst mapReduxStateToProps = (reduxState) => {\n    return reduxState;\n\n}\n\n\nexport default withRouter(connect(mapReduxStateToProps)(ClientPage));\n\n","import React, {Component} from 'react';\nimport {\n  HashRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport Header from '../Header/Header';\nimport Nav from '../Nav/Nav';\n// import Footer from '../Footer/Footer';\nimport ProtectedRoute from '../ProtectedRoute/ProtectedRoute'\nimport AboutPage from '../AboutPage/AboutPage';\nimport UserPage from '../UserPage/UserPage';\nimport CuratorsGallery from '../CuratorsGallery/CuratorsGallery';\nimport ArtPage from '../ArtPage/ArtPage';\nimport addArtworkForm from '../addArtworkForm/addArtworkForm';\nimport Home from '../Home/Home';\nimport ClientBoards from '../ClientBoards/ClientBoards';\nimport ClientPage from '../ClientPage/ClientPage';\nimport './App.css';\n\nclass App extends Component {\n  componentDidMount () {\n    this.props.dispatch({type: 'FETCH_USER'})\n  }\n\n  render() {\n    return (\n      <Router>\n        \n        <div>\n          <div>\n            <Nav />\n            \n          </div> \n          <div>\n          <Header />\n          </div>\n          \n          <UserPage />\n          <Switch>\n            {/* Visiting localhost:3000 will redirect to localhost:3000/home */}\n            <Redirect exact from=\"/\" to=\"/home\" />\n            {/* Visiting localhost:3000/about will show the about page.\n            This is a route anyone can see, no login necessary */}\n            <Route\n              exact\n              path=\"/about\"\n              component={AboutPage}\n            />\n            {/* For protected routes, the view could show one of several things on the same route.\n            Visiting localhost:3000/home will show the UserPage if the user is logged in.\n            If the user is not logged in, the ProtectedRoute will show the 'Login' or 'Register' page.\n            Even though it seems like they are different pages, the user is always on localhost:3000/home */}\n            <ProtectedRoute\n              exact\n              path=\"/clientBoards\"\n              component={ClientBoards}\n            />\n            <ProtectedRoute\n              exact\n              path=\"/home\"\n              component={Home} \n            />\n            {/* This works the same as the other protected route, except that if the user is logged in,\n            they will see the info page instead. */}\n            <ProtectedRoute\n              exact\n              path=\"/curatorGallery\"\n              component={CuratorsGallery}\n            />\n            \n            <ProtectedRoute\n              exact\n              path=\"/artPage\"\n              component={ArtPage}\n            />\n            <ProtectedRoute\n              exact\n              path=\"/artform\"\n              component={addArtworkForm}\n            />\n            <ProtectedRoute\n              exact\n              path=\"/clientForm\"\n              component={ClientPage}\n            />\n      \n\n            {/* If none of the other routes matched, we will show a 404. */}\n            <Route render={() => <h1>404</h1>} />\n          </Switch>\n        \n          \n          {/* <Footer /> */}\n          \n        </div>\n      </Router>\n  )}\n}\n\nexport default connect()(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\n\nimport rootReducer from './redux/reducers'; // imports ./redux/reducers/index.js\nimport rootSaga from './redux/sagas'; // imports ./redux/sagas/index.js\n\nimport App from './components/App/App';\n\nconst sagaMiddleware = createSagaMiddleware();\n\n// this line creates an array of all of redux middleware you want to use\n// we don't want a whole ton of console logs in our production code\n// logger will only be added to your project if your in development mode\nconst middlewareList = process.env.NODE_ENV === 'development' ?\n  [sagaMiddleware, logger] :\n  [sagaMiddleware];\n\nconst store = createStore(\n  // tells the saga middleware to use the rootReducer\n  // rootSaga contains all of our other reducers\n  rootReducer,\n  // adds all middleware to our project including saga and logger\n  applyMiddleware(...middlewareList),\n);\n\n// tells the saga middleware to use the rootSaga\n// rootSaga contains all of our other sagas\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('react-root'),\n);\n"],"sourceRoot":""}